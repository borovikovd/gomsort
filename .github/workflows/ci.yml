name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22.x, 1.23.x, 1.24.x]

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.64.8
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Build binary
      run: go build -v .

    - name: Test binary execution
      run: |
        ./gomsort -h || true  # Help exits with non-zero
        ./gomsort -n testdata/ || echo "Expected failure with testdata"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24.x

    - name: Build binary
      run: go build -v .

    - name: Run integration tests
      run: |
        # Create a test file
        echo 'package test
        type Server struct{}
        func (s *Server) helper() {}
        func (s *Server) Start() error { return nil }' > test_integration.go
        
        # Test dry run
        ./gomsort -n test_integration.go
        
        # Test actual sorting (recursive by default)
        ./gomsort -v test_integration.go
        
        # Verify file was modified
        if grep -q "Start()" test_integration.go && grep -q "helper()" test_integration.go; then
          echo "Integration test passed"
        else
          echo "Integration test failed"
          exit 1
        fi